{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst data = localStorage.getItem(\"cart\") ? JSON.parse(localStorage.getItem(\"cart\")) : [];\nconst initialState = {\n  items: [],\n  total: 0,\n  count: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, action) {\n      const item = action.payload;\n      state.cartItems.push(item);\n      toast.success(\"Decreased product quantity\", {\n        position: \"bottom-left\"\n      });\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    removeFromCart(state, action) {\n      state.cartItems.map(cartItem => {\n        if (cartItem._id === action.payload._id) {\n          const filteredItems = state.cartItems.filter(item => item._id !== cartItem._id);\n          console.log(filteredItems);\n          state.cartItems = filteredItems;\n          toast.error(\"Product removed from cart\", {\n            position: \"bottom-left\"\n          });\n        }\n\n        localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        return state;\n      });\n    },\n\n    getTotals(state, action) {\n      let {\n        total,\n        quantity\n      } = state.cartItems.reduce((cartTotal, cartItem) => {\n        const {\n          price,\n          cartQuantity\n        } = cartItem;\n        const itemTotal = price * cartQuantity;\n        cartTotal.total += itemTotal;\n        cartTotal.quantity += cartQuantity;\n        return cartTotal;\n      }, {\n        total: 0,\n        quantity: 0\n      });\n      total = parseFloat(total.toFixed(2));\n      state.cartTotalQuantity = quantity;\n      state.cartTotalAmount = total;\n    },\n\n    clearCart(state, action) {\n      state.cartItems = [];\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n      toast.error(\"Cart cleared\", {\n        position: \"bottom-left\"\n      });\n    }\n\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  getTotals,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/nrk/Desktop/projeler/bookStore/client/src/redux/cartSlice.js"],"names":["createSlice","toast","data","localStorage","getItem","JSON","parse","initialState","items","total","count","cartSlice","name","reducers","addToCart","state","action","item","payload","cartItems","push","success","position","setItem","stringify","removeFromCart","map","cartItem","_id","filteredItems","filter","console","log","error","getTotals","quantity","reduce","cartTotal","price","cartQuantity","itemTotal","parseFloat","toFixed","cartTotalQuantity","cartTotalAmount","clearCart","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\n\nconst data = localStorage.getItem(\"cart\") ?\n    JSON.parse(localStorage.getItem(\"cart\")) : []\n\nconst initialState = {\n    items: [],\n    total: 0,\n    count: 0,\n};\n\nconst cartSlice = createSlice({\n    name: \"cart\",\n    initialState,\n    reducers: {\n        addToCart(state, action) {\n\n\n            const item = action.payload\n            state.cartItems.push(item)\n            toast.success(\"Decreased product quantity\", {\n                position: \"bottom-left\",\n            });\n\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n\n        },\n        removeFromCart(state, action) {\n            state.cartItems.map((cartItem) => {\n                if (cartItem._id === action.payload._id) {\n                    const filteredItems = state.cartItems.filter(\n                        (item) => item._id !== cartItem._id\n                    );\n                    console.log(filteredItems);\n\n                    state.cartItems = filteredItems;\n\n                    toast.error(\"Product removed from cart\", {\n                        position: \"bottom-left\",\n                    });\n                }\n                localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n                return state;\n            });\n        },\n        getTotals(state, action) {\n            let { total, quantity } = state.cartItems.reduce(\n                (cartTotal, cartItem) => {\n                    const { price, cartQuantity } = cartItem;\n                    const itemTotal = price * cartQuantity;\n\n                    cartTotal.total += itemTotal;\n                    cartTotal.quantity += cartQuantity;\n\n                    return cartTotal;\n                },\n                {\n                    total: 0,\n                    quantity: 0,\n                }\n            );\n            total = parseFloat(total.toFixed(2));\n            state.cartTotalQuantity = quantity;\n            state.cartTotalAmount = total;\n        },\n        clearCart(state, action) {\n            state.cartItems = [];\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n            toast.error(\"Cart cleared\", { position: \"bottom-left\" });\n        },\n    },\n});\n\nexport const { addToCart, removeFromCart, getTotals, clearCart } =\n    cartSlice.actions;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}