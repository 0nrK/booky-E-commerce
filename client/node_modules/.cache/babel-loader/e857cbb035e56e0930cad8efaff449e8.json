{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst initialState = {\n  items: [],\n  total: 0,\n  count: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, action) {\n      var isSame = false;\n      let newItems = state.items;\n      let total = 0;\n      let count = 0;\n\n      if (newItems.length > 0) {\n        newItems = newItems.map(elem => {\n          if (elem.item._id === action.payload._id) {\n            isSame = true;\n            elem.count += action.payload.count;\n            return elem;\n          }\n\n          return elem;\n        });\n      }\n\n      if (!isSame) {\n        newItems = [...newItems, {\n          item: action.payload.item,\n          count: action.payload.count\n        }];\n      }\n      /* total = newItems.reduce((acc, elem, ind) => {\n          return (acc + elem.item.price * elem.count)\n      }, 0)\n       count = newItems.reduce((acc, elem, ind) => {\n          return (acc + elem.count)\n      }, 0) */\n\n\n      if (localStorage.getItem(\"count\")) {\n        localStorage[\"items\"] = JSON.stringify(newItems);\n        localStorage[\"count\"] = count;\n        localStorage[\"total\"] = total;\n      } else {\n        localStorage.setItem(\"items\", JSON.stringify(newItems));\n        localStorage.setItem(\"total\", total);\n        localStorage.setItem(\"count\", count);\n      }\n\n      return { ...state,\n        items: [...newItems],\n        total,\n        count\n      };\n    },\n\n    removeFromCart(state, action) {\n      state.cartItems.map(cartItem => {\n        if (cartItem._id === action.payload._id) {\n          const filteredItems = state.cartItems.filter(item => item._id !== cartItem._id);\n          console.log(filteredItems);\n          state.cartItems = filteredItems;\n          toast.error(\"Product removed from cart\", {\n            position: \"bottom-left\"\n          });\n        }\n\n        localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        return state;\n      });\n    },\n\n    getTotals(state, action) {\n      let {\n        total,\n        quantity\n      } = state.cartItems.reduce((cartTotal, cartItem) => {\n        const {\n          price,\n          cartQuantity\n        } = cartItem;\n        const itemTotal = price * cartQuantity;\n        cartTotal.total += itemTotal;\n        cartTotal.quantity += cartQuantity;\n        return cartTotal;\n      }, {\n        total: 0,\n        quantity: 0\n      });\n      total = parseFloat(total.toFixed(2));\n      state.cartTotalQuantity = quantity;\n      state.cartTotalAmount = total;\n    },\n\n    clearCart(state, action) {\n      state.cartItems = [];\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n      toast.error(\"Cart cleared\", {\n        position: \"bottom-left\"\n      });\n    }\n\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  getTotals,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/nrk/Desktop/projeler/bookStore/client/src/redux/cartSlice.js"],"names":["createSlice","toast","initialState","items","total","count","cartSlice","name","reducers","addToCart","state","action","isSame","newItems","length","map","elem","item","_id","payload","localStorage","getItem","JSON","stringify","setItem","removeFromCart","cartItems","cartItem","filteredItems","filter","console","log","error","position","getTotals","quantity","reduce","cartTotal","price","cartQuantity","itemTotal","parseFloat","toFixed","cartTotalQuantity","cartTotalAmount","clearCart","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\n\n\nconst initialState = {\n    items: [],\n    total: 0,\n    count: 0,\n};\n\nconst cartSlice = createSlice({\n    name: \"cart\",\n    initialState,\n    reducers: {\n        addToCart(state, action) {\n\n            var isSame = false;\n            let newItems = state.items\n            let total = 0;\n            let count = 0;\n\n            if (newItems.length > 0) {\n                newItems = newItems.map(elem => {\n                    if (elem.item._id === action.payload._id) {\n                        isSame = true;\n                        elem.count += action.payload.count;\n                        return elem;\n                    }\n                    return elem;\n                })\n            }\n\n            if (!isSame) {\n                newItems = [\n                    ...newItems, {\n                        item: action.payload.item,\n                        count: action.payload.count\n                    }\n                ]\n            }\n\n            /* total = newItems.reduce((acc, elem, ind) => {\n                return (acc + elem.item.price * elem.count)\n            }, 0)\n\n            count = newItems.reduce((acc, elem, ind) => {\n                return (acc + elem.count)\n            }, 0) */\n\n            if (localStorage.getItem(\"count\")) {\n                localStorage[\"items\"] = JSON.stringify(newItems);\n                localStorage[\"count\"] = count;\n                localStorage[\"total\"] = total;\n            } else {\n                localStorage.setItem(\"items\", JSON.stringify(newItems));\n                localStorage.setItem(\"total\", total);\n                localStorage.setItem(\"count\", count);\n            }\n\n            return {\n                ...state,\n                items: [...newItems],\n                total,\n                count\n            }\n\n        },\n        removeFromCart(state, action) {\n            state.cartItems.map((cartItem) => {\n                if (cartItem._id === action.payload._id) {\n                    const filteredItems = state.cartItems.filter(\n                        (item) => item._id !== cartItem._id\n                    );\n                    console.log(filteredItems);\n\n                    state.cartItems = filteredItems;\n\n                    toast.error(\"Product removed from cart\", {\n                        position: \"bottom-left\",\n                    });\n                }\n                localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n                return state;\n            });\n        },\n        getTotals(state, action) {\n            let { total, quantity } = state.cartItems.reduce(\n                (cartTotal, cartItem) => {\n                    const { price, cartQuantity } = cartItem;\n                    const itemTotal = price * cartQuantity;\n\n                    cartTotal.total += itemTotal;\n                    cartTotal.quantity += cartQuantity;\n\n                    return cartTotal;\n                },\n                {\n                    total: 0,\n                    quantity: 0,\n                }\n            );\n            total = parseFloat(total.toFixed(2));\n            state.cartTotalQuantity = quantity;\n            state.cartTotalAmount = total;\n        },\n        clearCart(state, action) {\n            state.cartItems = [];\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n            toast.error(\"Cart cleared\", { position: \"bottom-left\" });\n        },\n    },\n});\n\nexport const { addToCart, removeFromCart, getTotals, clearCart } =\n    cartSlice.actions;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}