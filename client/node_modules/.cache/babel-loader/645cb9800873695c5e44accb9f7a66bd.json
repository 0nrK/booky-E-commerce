{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport cartSlice from \"./cartSlice\";\nimport authService from \"../services/authService\";\nconst user = JSON.parse(localStorage.getItem(\"user\"));\nexport const register = createAsyncThunk(\"auth/register\", async _ref => {\n  let {\n    username,\n    password\n  } = _ref;\n\n  try {\n    const res = await authService.register(username, password);\n    return res.data;\n  } catch (err) {\n    console.log(err);\n  }\n});\nexport const login = createAsyncThunk(\"auth/login\", async _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n\n  try {\n    const data = await authService.login(username, password);\n    return {\n      user: data\n    };\n  } catch (err) {\n    console.log(err);\n  }\n});\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n  await authService.logout();\n});\nconst initialState = user ? {\n  isLoggedIn: true,\n  user\n} : {\n  isLoggedIn: false,\n  user: null\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  extraReducers: {\n    [register.fulfilled]: (state, action) => {\n      state.isLoggedIn = false;\n    },\n    [register.rejected]: (state, action) => {\n      state.isLoggedIn = false;\n    },\n    [login.fulfilled]: (state, action) => {\n      state.isLoggedIn = true;\n      state.user = user;\n    },\n    [login.rejected]: (state, action) => {\n      state.isLoggedIn = false;\n      state.user = null;\n    },\n    [logout.fulfilled]: (state, action) => {\n      state.isLoggedIn = false;\n      state.user = null;\n    }\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"sources":["/home/nrk/Desktop/projeler/bookStore/client/src/redux/authSlice.js"],"names":["createSlice","createAsyncThunk","cartSlice","authService","user","JSON","parse","localStorage","getItem","register","username","password","res","data","err","console","log","login","logout","initialState","isLoggedIn","authSlice","name","extraReducers","fulfilled","state","action","rejected","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AAEA,OAAO,MAAMC,QAAQ,GAAGR,gBAAgB,CAAC,eAAD,EACpC,cAAkC;AAAA,MAA3B;AAAES,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA2B;;AAC9B,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMT,WAAW,CAACM,QAAZ,CAAqBC,QAArB,EAA+BC,QAA/B,CAAlB;AACA,WAAOC,GAAG,CAACC,IAAX;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ,CARmC,CAAjC;AAWP,OAAO,MAAMG,KAAK,GAAGhB,gBAAgB,CAAC,YAAD,EACjC,eAAkC;AAAA,MAA3B;AAAES,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA2B;;AAC9B,MAAI;AACA,UAAME,IAAI,GAAG,MAAMV,WAAW,CAACc,KAAZ,CAAkBP,QAAlB,EAA4BC,QAA5B,CAAnB;AACA,WAAO;AAAEP,MAAAA,IAAI,EAAES;AAAR,KAAP;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ,CARgC,CAA9B;AAWP,OAAO,MAAMI,MAAM,GAAGjB,gBAAgB,CAAC,aAAD,EAAgB,YAAY;AAC9D,QAAME,WAAW,CAACe,MAAZ,EAAN;AACH,CAFqC,CAA/B;AAKP,MAAMC,YAAY,GAAGf,IAAI,GAAG;AAAEgB,EAAAA,UAAU,EAAE,IAAd;AAAoBhB,EAAAA;AAApB,CAAH,GAAgC;AAAEgB,EAAAA,UAAU,EAAE,KAAd;AAAqBhB,EAAAA,IAAI,EAAE;AAA3B,CAAzD;AAEA,MAAMiB,SAAS,GAAGrB,WAAW,CAAC;AAC1BsB,EAAAA,IAAI,EAAE,MADoB;AAE1BH,EAAAA,YAF0B;AAG1BI,EAAAA,aAAa,EAAE;AACX,KAACd,QAAQ,CAACe,SAAV,GAAsB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrCD,MAAAA,KAAK,CAACL,UAAN,GAAmB,KAAnB;AACH,KAHU;AAIX,KAACX,QAAQ,CAACkB,QAAV,GAAqB,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACpCD,MAAAA,KAAK,CAACL,UAAN,GAAmB,KAAnB;AACH,KANU;AAOX,KAACH,KAAK,CAACO,SAAP,GAAmB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClCD,MAAAA,KAAK,CAACL,UAAN,GAAmB,IAAnB;AACAK,MAAAA,KAAK,CAACrB,IAAN,GAAaA,IAAb;AACH,KAVU;AAWX,KAACa,KAAK,CAACU,QAAP,GAAkB,CAACF,KAAD,EAAQC,MAAR,KAAmB;AACjCD,MAAAA,KAAK,CAACL,UAAN,GAAmB,KAAnB;AACAK,MAAAA,KAAK,CAACrB,IAAN,GAAa,IAAb;AACH,KAdU;AAeX,KAACc,MAAM,CAACM,SAAR,GAAoB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACL,UAAN,GAAmB,KAAnB;AACAK,MAAAA,KAAK,CAACrB,IAAN,GAAa,IAAb;AACH;AAlBU;AAHW,CAAD,CAA7B;AA2BA,eAAeiB,SAAS,CAACO,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\nimport cartSlice from \"./cartSlice\";\nimport authService from \"../services/authService\"\n\nconst user = JSON.parse(localStorage.getItem(\"user\"))\n\nexport const register = createAsyncThunk(\"auth/register\",\n    async ({ username, password }) => {\n        try {\n            const res = await authService.register(username, password)\n            return res.data\n        } catch (err) {\n            console.log(err);\n        }\n    }\n)\n\nexport const login = createAsyncThunk(\"auth/login\",\n    async ({ username, password }) => {\n        try {\n            const data = await authService.login(username, password)\n            return { user: data }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n)\n\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n    await authService.logout()\n})\n\n\nconst initialState = user ? { isLoggedIn: true, user } : { isLoggedIn: false, user: null }\n\nconst authSlice = createSlice({\n    name: \"auth\",\n    initialState,\n    extraReducers: {\n        [register.fulfilled]: (state, action) => {\n            state.isLoggedIn = false;\n        },\n        [register.rejected]: (state, action) => {\n            state.isLoggedIn = false\n        },\n        [login.fulfilled]: (state, action) => {\n            state.isLoggedIn = true;\n            state.user = user\n        },\n        [login.rejected]: (state, action) => {\n            state.isLoggedIn = false;\n            state.user = null\n        },\n        [logout.fulfilled]: (state, action) => {\n            state.isLoggedIn = false;\n            state.user = null\n        }\n\n    }\n})\n\n\nexport default authSlice.reducer\n"]},"metadata":{},"sourceType":"module"}