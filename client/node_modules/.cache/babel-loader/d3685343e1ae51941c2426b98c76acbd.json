{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\n\nvar _isByteLength = _interopRequireDefault(require(\"./isByteLength\"));\n\nvar _isFQDN = _interopRequireDefault(require(\"./isFQDN\"));\n\nvar _isIP = _interopRequireDefault(require(\"./isIP\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true,\n  blacklisted_chars: '',\n  ignore_max_length: false,\n  host_blacklist: []\n};\n/* eslint-disable max-len */\n\n/* eslint-disable no-control-regex */\n\nvar splitNameAddress = /^([^\\x00-\\x1F\\x7F-\\x9F\\cX]+)</i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar gmailUserPart = /^[a-z\\d]+$/;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\nvar defaultMaxEmailLength = 254;\n/* eslint-enable max-len */\n\n/* eslint-enable no-control-regex */\n\n/**\n * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2\n * @param {String} display_name\n */\n\nfunction validateDisplayName(display_name) {\n  var display_name_without_quotes = display_name.replace(/^\"(.+)\"$/, '$1'); // display name with only spaces is not valid\n\n  if (!display_name_without_quotes.trim()) {\n    return false;\n  } // check whether display name contains illegal character\n\n\n  var contains_illegal = /[\\.\";<>]/.test(display_name_without_quotes);\n\n  if (contains_illegal) {\n    // if contains illegal characters,\n    // must to be enclosed in double-quotes, otherwise it's not a valid display name\n    if (display_name_without_quotes === display_name) {\n      return false;\n    } // the quotes in display name must start with character symbol \\\n\n\n    var all_start_with_back_slash = display_name_without_quotes.split('\"').length === display_name_without_quotes.split('\\\\\"').length;\n\n    if (!all_start_with_back_slash) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isEmail(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(splitNameAddress);\n\n    if (display_email) {\n      var display_name = display_email[1]; // Remove display name and angle brackets to get email address\n      // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)\n\n      str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name\n      // because there may be a space between display name and email address\n      // eg. myname <address@gmail.com>\n      // the display name is `myname` instead of `myname `, so need to trim the last space\n\n      if (display_name.endsWith(' ')) {\n        display_name = display_name.substr(0, display_name.length - 1);\n      }\n\n      if (!validateDisplayName(display_name)) {\n        return false;\n      }\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {\n    return false;\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var lower_domain = domain.toLowerCase();\n\n  if (options.host_blacklist.includes(lower_domain)) {\n    return false;\n  }\n\n  var user = parts.join('@');\n\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n      Previously we removed dots for gmail addresses before validating.\n      This was removed because it allows `multiple..dots@gmail.com`\n      to be reported as valid, but it is not.\n      Gmail only normalizes single dots, removing them from here is pointless,\n      should be done in normalizeEmail\n    */\n    user = user.toLowerCase(); // Removing sub-address from username before gmail validation\n\n    var username = user.split('+')[0]; // Dots are not included in gmail length restriction\n\n    if (!(0, _isByteLength.default)(username.replace(/\\./g, ''), {\n      min: 6,\n      max: 30\n    })) {\n      return false;\n    }\n\n    var _user_parts = username.split('.');\n\n    for (var i = 0; i < _user_parts.length; i++) {\n      if (!gmailUserPart.test(_user_parts[i])) {\n        return false;\n      }\n    }\n  }\n\n  if (options.ignore_max_length === false && (!(0, _isByteLength.default)(user, {\n    max: 64\n  }) || !(0, _isByteLength.default)(domain, {\n    max: 254\n  }))) {\n    return false;\n  }\n\n  if (!(0, _isFQDN.default)(domain, {\n    require_tld: options.require_tld\n  })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n\n    if (!(0, _isIP.default)(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n\n      var noBracketdomain = domain.substr(1, domain.length - 2);\n\n      if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n  var user_parts = user.split('.');\n\n  for (var _i = 0; _i < user_parts.length; _i++) {\n    if (!pattern.test(user_parts[_i])) {\n      return false;\n    }\n  }\n\n  if (options.blacklisted_chars) {\n    if (user.search(new RegExp(\"[\".concat(options.blacklisted_chars, \"]+\"), 'g')) !== -1) return false;\n  }\n\n  return true;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/home/nrk/Desktop/projeler/bookStore/client/node_modules/validator/lib/isEmail.js"],"names":["Object","defineProperty","exports","value","default","isEmail","_assertString","_interopRequireDefault","require","_merge","_isByteLength","_isFQDN","_isIP","obj","__esModule","default_email_options","allow_display_name","require_display_name","allow_utf8_local_part","require_tld","blacklisted_chars","ignore_max_length","host_blacklist","splitNameAddress","emailUserPart","gmailUserPart","quotedEmailUser","emailUserUtf8Part","quotedEmailUserUtf8","defaultMaxEmailLength","validateDisplayName","display_name","display_name_without_quotes","replace","trim","contains_illegal","test","all_start_with_back_slash","split","length","str","options","display_email","match","endsWith","substr","parts","domain","pop","lower_domain","toLowerCase","includes","user","join","domain_specific_validation","username","min","max","_user_parts","i","allow_ip_domain","startsWith","noBracketdomain","slice","pattern","user_parts","_i","search","RegExp","concat","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,OAAlB;;AAEA,IAAIC,aAAa,GAAGC,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAA1C;;AAEA,IAAIC,MAAM,GAAGF,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAnC;;AAEA,IAAIE,aAAa,GAAGH,sBAAsB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAA1C;;AAEA,IAAIG,OAAO,GAAGJ,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAII,KAAK,GAAGL,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAAlC;;AAEA,SAASD,sBAAT,CAAgCM,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAET,IAAAA,OAAO,EAAES;AAAX,GAArC;AAAwD;;AAE/F,IAAIE,qBAAqB,GAAG;AAC1BC,EAAAA,kBAAkB,EAAE,KADM;AAE1BC,EAAAA,oBAAoB,EAAE,KAFI;AAG1BC,EAAAA,qBAAqB,EAAE,IAHG;AAI1BC,EAAAA,WAAW,EAAE,IAJa;AAK1BC,EAAAA,iBAAiB,EAAE,EALO;AAM1BC,EAAAA,iBAAiB,EAAE,KANO;AAO1BC,EAAAA,cAAc,EAAE;AAPU,CAA5B;AASA;;AAEA;;AAEA,IAAIC,gBAAgB,GAAG,gCAAvB;AACA,IAAIC,aAAa,GAAG,wCAApB;AACA,IAAIC,aAAa,GAAG,YAApB;AACA,IAAIC,eAAe,GAAG,iGAAtB;AACA,IAAIC,iBAAiB,GAAG,+EAAxB;AACA,IAAIC,mBAAmB,GAAG,+KAA1B;AACA,IAAIC,qBAAqB,GAAG,GAA5B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,SAASC,mBAAT,CAA6BC,YAA7B,EAA2C;AACzC,MAAIC,2BAA2B,GAAGD,YAAY,CAACE,OAAb,CAAqB,UAArB,EAAiC,IAAjC,CAAlC,CADyC,CACiC;;AAE1E,MAAI,CAACD,2BAA2B,CAACE,IAA5B,EAAL,EAAyC;AACvC,WAAO,KAAP;AACD,GALwC,CAKvC;;;AAGF,MAAIC,gBAAgB,GAAG,WAAWC,IAAX,CAAgBJ,2BAAhB,CAAvB;;AAEA,MAAIG,gBAAJ,EAAsB;AACpB;AACA;AACA,QAAIH,2BAA2B,KAAKD,YAApC,EAAkD;AAChD,aAAO,KAAP;AACD,KALmB,CAKlB;;;AAGF,QAAIM,yBAAyB,GAAGL,2BAA2B,CAACM,KAA5B,CAAkC,GAAlC,EAAuCC,MAAvC,KAAkDP,2BAA2B,CAACM,KAA5B,CAAkC,KAAlC,EAAyCC,MAA3H;;AAEA,QAAI,CAACF,yBAAL,EAAgC;AAC9B,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAED,SAAShC,OAAT,CAAiBmC,GAAjB,EAAsBC,OAAtB,EAA+B;AAC7B,GAAC,GAAGnC,aAAa,CAACF,OAAlB,EAA2BoC,GAA3B;AACAC,EAAAA,OAAO,GAAG,CAAC,GAAGhC,MAAM,CAACL,OAAX,EAAoBqC,OAApB,EAA6B1B,qBAA7B,CAAV;;AAEA,MAAI0B,OAAO,CAACxB,oBAAR,IAAgCwB,OAAO,CAACzB,kBAA5C,EAAgE;AAC9D,QAAI0B,aAAa,GAAGF,GAAG,CAACG,KAAJ,CAAUpB,gBAAV,CAApB;;AAEA,QAAImB,aAAJ,EAAmB;AACjB,UAAIX,YAAY,GAAGW,aAAa,CAAC,CAAD,CAAhC,CADiB,CACoB;AACrC;;AAEAF,MAAAA,GAAG,GAAGA,GAAG,CAACP,OAAJ,CAAYF,YAAZ,EAA0B,EAA1B,EAA8BE,OAA9B,CAAsC,UAAtC,EAAkD,EAAlD,CAAN,CAJiB,CAI4C;AAC7D;AACA;AACA;;AAEA,UAAIF,YAAY,CAACa,QAAb,CAAsB,GAAtB,CAAJ,EAAgC;AAC9Bb,QAAAA,YAAY,GAAGA,YAAY,CAACc,MAAb,CAAoB,CAApB,EAAuBd,YAAY,CAACQ,MAAb,GAAsB,CAA7C,CAAf;AACD;;AAED,UAAI,CAACT,mBAAmB,CAACC,YAAD,CAAxB,EAAwC;AACtC,eAAO,KAAP;AACD;AACF,KAhBD,MAgBO,IAAIU,OAAO,CAACxB,oBAAZ,EAAkC;AACvC,aAAO,KAAP;AACD;AACF;;AAED,MAAI,CAACwB,OAAO,CAACpB,iBAAT,IAA8BmB,GAAG,CAACD,MAAJ,GAAaV,qBAA/C,EAAsE;AACpE,WAAO,KAAP;AACD;;AAED,MAAIiB,KAAK,GAAGN,GAAG,CAACF,KAAJ,CAAU,GAAV,CAAZ;AACA,MAAIS,MAAM,GAAGD,KAAK,CAACE,GAAN,EAAb;AACA,MAAIC,YAAY,GAAGF,MAAM,CAACG,WAAP,EAAnB;;AAEA,MAAIT,OAAO,CAACnB,cAAR,CAAuB6B,QAAvB,CAAgCF,YAAhC,CAAJ,EAAmD;AACjD,WAAO,KAAP;AACD;;AAED,MAAIG,IAAI,GAAGN,KAAK,CAACO,IAAN,CAAW,GAAX,CAAX;;AAEA,MAAIZ,OAAO,CAACa,0BAAR,KAAuCL,YAAY,KAAK,WAAjB,IAAgCA,YAAY,KAAK,gBAAxF,CAAJ,EAA+G;AAC7G;AACJ;AACA;AACA;AACA;AACA;AACA;AACIG,IAAAA,IAAI,GAAGA,IAAI,CAACF,WAAL,EAAP,CAR6G,CAQlF;;AAE3B,QAAIK,QAAQ,GAAGH,IAAI,CAACd,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAf,CAV6G,CAU1E;;AAEnC,QAAI,CAAC,CAAC,GAAG5B,aAAa,CAACN,OAAlB,EAA2BmD,QAAQ,CAACtB,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAA3B,EAAwD;AAC3DuB,MAAAA,GAAG,EAAE,CADsD;AAE3DC,MAAAA,GAAG,EAAE;AAFsD,KAAxD,CAAL,EAGI;AACF,aAAO,KAAP;AACD;;AAED,QAAIC,WAAW,GAAGH,QAAQ,CAACjB,KAAT,CAAe,GAAf,CAAlB;;AAEA,SAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACnB,MAAhC,EAAwCoB,CAAC,EAAzC,EAA6C;AAC3C,UAAI,CAAClC,aAAa,CAACW,IAAd,CAAmBsB,WAAW,CAACC,CAAD,CAA9B,CAAL,EAAyC;AACvC,eAAO,KAAP;AACD;AACF;AACF;;AAED,MAAIlB,OAAO,CAACpB,iBAAR,KAA8B,KAA9B,KAAwC,CAAC,CAAC,GAAGX,aAAa,CAACN,OAAlB,EAA2BgD,IAA3B,EAAiC;AAC5EK,IAAAA,GAAG,EAAE;AADuE,GAAjC,CAAD,IAEtC,CAAC,CAAC,GAAG/C,aAAa,CAACN,OAAlB,EAA2B2C,MAA3B,EAAmC;AACxCU,IAAAA,GAAG,EAAE;AADmC,GAAnC,CAFH,CAAJ,EAIK;AACH,WAAO,KAAP;AACD;;AAED,MAAI,CAAC,CAAC,GAAG9C,OAAO,CAACP,OAAZ,EAAqB2C,MAArB,EAA6B;AAChC5B,IAAAA,WAAW,EAAEsB,OAAO,CAACtB;AADW,GAA7B,CAAL,EAEI;AACF,QAAI,CAACsB,OAAO,CAACmB,eAAb,EAA8B;AAC5B,aAAO,KAAP;AACD;;AAED,QAAI,CAAC,CAAC,GAAGhD,KAAK,CAACR,OAAV,EAAmB2C,MAAnB,CAAL,EAAiC;AAC/B,UAAI,CAACA,MAAM,CAACc,UAAP,CAAkB,GAAlB,CAAD,IAA2B,CAACd,MAAM,CAACH,QAAP,CAAgB,GAAhB,CAAhC,EAAsD;AACpD,eAAO,KAAP;AACD;;AAED,UAAIkB,eAAe,GAAGf,MAAM,CAACF,MAAP,CAAc,CAAd,EAAiBE,MAAM,CAACR,MAAP,GAAgB,CAAjC,CAAtB;;AAEA,UAAIuB,eAAe,CAACvB,MAAhB,KAA2B,CAA3B,IAAgC,CAAC,CAAC,GAAG3B,KAAK,CAACR,OAAV,EAAmB0D,eAAnB,CAArC,EAA0E;AACxE,eAAO,KAAP;AACD;AACF;AACF;;AAED,MAAIV,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACnBA,IAAAA,IAAI,GAAGA,IAAI,CAACW,KAAL,CAAW,CAAX,EAAcX,IAAI,CAACb,MAAL,GAAc,CAA5B,CAAP;AACA,WAAOE,OAAO,CAACvB,qBAAR,GAAgCU,mBAAmB,CAACQ,IAApB,CAAyBgB,IAAzB,CAAhC,GAAiE1B,eAAe,CAACU,IAAhB,CAAqBgB,IAArB,CAAxE;AACD;;AAED,MAAIY,OAAO,GAAGvB,OAAO,CAACvB,qBAAR,GAAgCS,iBAAhC,GAAoDH,aAAlE;AACA,MAAIyC,UAAU,GAAGb,IAAI,CAACd,KAAL,CAAW,GAAX,CAAjB;;AAEA,OAAK,IAAI4B,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGD,UAAU,CAAC1B,MAAjC,EAAyC2B,EAAE,EAA3C,EAA+C;AAC7C,QAAI,CAACF,OAAO,CAAC5B,IAAR,CAAa6B,UAAU,CAACC,EAAD,CAAvB,CAAL,EAAmC;AACjC,aAAO,KAAP;AACD;AACF;;AAED,MAAIzB,OAAO,CAACrB,iBAAZ,EAA+B;AAC7B,QAAIgC,IAAI,CAACe,MAAL,CAAY,IAAIC,MAAJ,CAAW,IAAIC,MAAJ,CAAW5B,OAAO,CAACrB,iBAAnB,EAAsC,IAAtC,CAAX,EAAwD,GAAxD,CAAZ,MAA8E,CAAC,CAAnF,EAAsF,OAAO,KAAP;AACvF;;AAED,SAAO,IAAP;AACD;;AAEDkD,MAAM,CAACpE,OAAP,GAAiBA,OAAO,CAACE,OAAzB;AACAkE,MAAM,CAACpE,OAAP,CAAeE,OAAf,GAAyBF,OAAO,CAACE,OAAjC","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\n\nvar _isByteLength = _interopRequireDefault(require(\"./isByteLength\"));\n\nvar _isFQDN = _interopRequireDefault(require(\"./isFQDN\"));\n\nvar _isIP = _interopRequireDefault(require(\"./isIP\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true,\n  blacklisted_chars: '',\n  ignore_max_length: false,\n  host_blacklist: []\n};\n/* eslint-disable max-len */\n\n/* eslint-disable no-control-regex */\n\nvar splitNameAddress = /^([^\\x00-\\x1F\\x7F-\\x9F\\cX]+)</i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar gmailUserPart = /^[a-z\\d]+$/;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\nvar defaultMaxEmailLength = 254;\n/* eslint-enable max-len */\n\n/* eslint-enable no-control-regex */\n\n/**\n * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2\n * @param {String} display_name\n */\n\nfunction validateDisplayName(display_name) {\n  var display_name_without_quotes = display_name.replace(/^\"(.+)\"$/, '$1'); // display name with only spaces is not valid\n\n  if (!display_name_without_quotes.trim()) {\n    return false;\n  } // check whether display name contains illegal character\n\n\n  var contains_illegal = /[\\.\";<>]/.test(display_name_without_quotes);\n\n  if (contains_illegal) {\n    // if contains illegal characters,\n    // must to be enclosed in double-quotes, otherwise it's not a valid display name\n    if (display_name_without_quotes === display_name) {\n      return false;\n    } // the quotes in display name must start with character symbol \\\n\n\n    var all_start_with_back_slash = display_name_without_quotes.split('\"').length === display_name_without_quotes.split('\\\\\"').length;\n\n    if (!all_start_with_back_slash) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isEmail(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(splitNameAddress);\n\n    if (display_email) {\n      var display_name = display_email[1]; // Remove display name and angle brackets to get email address\n      // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)\n\n      str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name\n      // because there may be a space between display name and email address\n      // eg. myname <address@gmail.com>\n      // the display name is `myname` instead of `myname `, so need to trim the last space\n\n      if (display_name.endsWith(' ')) {\n        display_name = display_name.substr(0, display_name.length - 1);\n      }\n\n      if (!validateDisplayName(display_name)) {\n        return false;\n      }\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {\n    return false;\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var lower_domain = domain.toLowerCase();\n\n  if (options.host_blacklist.includes(lower_domain)) {\n    return false;\n  }\n\n  var user = parts.join('@');\n\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n      Previously we removed dots for gmail addresses before validating.\n      This was removed because it allows `multiple..dots@gmail.com`\n      to be reported as valid, but it is not.\n      Gmail only normalizes single dots, removing them from here is pointless,\n      should be done in normalizeEmail\n    */\n    user = user.toLowerCase(); // Removing sub-address from username before gmail validation\n\n    var username = user.split('+')[0]; // Dots are not included in gmail length restriction\n\n    if (!(0, _isByteLength.default)(username.replace(/\\./g, ''), {\n      min: 6,\n      max: 30\n    })) {\n      return false;\n    }\n\n    var _user_parts = username.split('.');\n\n    for (var i = 0; i < _user_parts.length; i++) {\n      if (!gmailUserPart.test(_user_parts[i])) {\n        return false;\n      }\n    }\n  }\n\n  if (options.ignore_max_length === false && (!(0, _isByteLength.default)(user, {\n    max: 64\n  }) || !(0, _isByteLength.default)(domain, {\n    max: 254\n  }))) {\n    return false;\n  }\n\n  if (!(0, _isFQDN.default)(domain, {\n    require_tld: options.require_tld\n  })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n\n    if (!(0, _isIP.default)(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n\n      var noBracketdomain = domain.substr(1, domain.length - 2);\n\n      if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n  var user_parts = user.split('.');\n\n  for (var _i = 0; _i < user_parts.length; _i++) {\n    if (!pattern.test(user_parts[_i])) {\n      return false;\n    }\n  }\n\n  if (options.blacklisted_chars) {\n    if (user.search(new RegExp(\"[\".concat(options.blacklisted_chars, \"]+\"), 'g')) !== -1) return false;\n  }\n\n  return true;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}