{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { v4 as uuid } from \"uuid\";\nconst data = typeof window !== \"undefined\" && localStorage.getItem(\"cart\") ? JSON.parse(localStorage.getItem(\"cart\")) : [];\nconst initialState = {\n  cartItems: data ? data : []\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, action) {\n      const product = action.payload;\n      const productInCart = state.find(item => item._id === product._id && item.title === product.title && item.description === product.description && item.price === product.price);\n\n      if (productInCart) {\n        const cartProductIndex = state.findIndex(item => item._id === product._id);\n        state[cartProductIndex].quantity = state[cartProductIndex].quantity + product.quantity;\n        toast.info(\"Increased product quantity\", {\n          position: \"bottom-left\"\n        });\n      } else {\n        product['cartId'] = uuid();\n        toast.success(\"Book added to cart\", {\n          position: \"bottom-left\"\n        });\n        return [product, ...state];\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    decreaseCart(state, action) {\n      const itemIndex = state.cartItems.findIndex(item => item.id === action.payload.id);\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n        toast.info(\"Decreased product quantity\", {\n          position: \"bottom-left\"\n        });\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        const nextCartItems = state.cartItems.filter(item => item.id !== action.payload.id);\n        state.cartItems = nextCartItems;\n        toast.error(\"Product removed from cart\", {\n          position: \"bottom-left\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    removeFromCart(state, action) {\n      state.cartItems.map(cartItem => {\n        if (cartItem.id === action.payload.id) {\n          const nextCartItems = state.cartItems.filter(item => item.id !== cartItem.id);\n          state.cartItems = nextCartItems;\n          toast.error(\"Product removed from cart\", {\n            position: \"bottom-left\"\n          });\n        }\n\n        localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        return state;\n      });\n    },\n\n    getTotals(state, action) {\n      let {\n        total,\n        quantity\n      } = state.cartItems.reduce((cartTotal, cartItem) => {\n        const {\n          price,\n          cartQuantity\n        } = cartItem;\n        const itemTotal = price * cartQuantity;\n        cartTotal.total += itemTotal;\n        cartTotal.quantity += cartQuantity;\n        return cartTotal;\n      }, {\n        total: 0,\n        quantity: 0\n      });\n      total = parseFloat(total.toFixed(2));\n      state.cartTotalQuantity = quantity;\n      state.cartTotalAmount = total;\n    },\n\n    clearCart(state, action) {\n      state.cartItems = [];\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n      toast.error(\"Cart cleared\", {\n        position: \"bottom-left\"\n      });\n    }\n\n  }\n});\nexport const {\n  addToCart,\n  decreaseCart,\n  removeFromCart,\n  getTotals,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/nrk/Desktop/projeler/bookStore/client/src/redux/cartSlice.js"],"names":["createSlice","toast","v4","uuid","data","window","localStorage","getItem","JSON","parse","initialState","cartItems","cartSlice","name","reducers","addToCart","state","action","product","payload","productInCart","find","item","_id","title","description","price","cartProductIndex","findIndex","quantity","info","position","success","setItem","stringify","decreaseCart","itemIndex","id","cartQuantity","nextCartItems","filter","error","removeFromCart","map","cartItem","getTotals","total","reduce","cartTotal","itemTotal","parseFloat","toFixed","cartTotalQuantity","cartTotalAmount","clearCart","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { v4 as uuid } from \"uuid\";\n\nconst data = typeof window !== \"undefined\" && localStorage.getItem(\"cart\") ?\n    JSON.parse(localStorage.getItem(\"cart\")) : []\n\nconst initialState = {\n    cartItems: data ? data : []\n};\n\nconst cartSlice = createSlice({\n    name: \"cart\",\n    initialState,\n    reducers: {\n        addToCart(state, action) {\n            const product = action.payload\n            const productInCart = state.find(item => item._id === product._id\n                && item.title === product.title\n                && item.description === product.description\n                && item.price === product.price);\n\n\n            if (productInCart) {\n                const cartProductIndex = state.findIndex(item => item._id === product._id)\n                state[cartProductIndex].quantity = state[cartProductIndex].quantity + product.quantity;\n                toast.info(\"Increased product quantity\", {\n                    position: \"bottom-left\",\n                });\n            }\n            else {\n                product['cartId'] = uuid();\n                toast.success(\"Book added to cart\", {\n                    position: \"bottom-left\",\n                });\n                return [product, ...state];\n            }\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        },\n        decreaseCart(state, action) {\n            const itemIndex = state.cartItems.findIndex(\n                (item) => item.id === action.payload.id\n            );\n\n            if (state.cartItems[itemIndex].cartQuantity > 1) {\n                state.cartItems[itemIndex].cartQuantity -= 1;\n\n                toast.info(\"Decreased product quantity\", {\n                    position: \"bottom-left\",\n                });\n            } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n                const nextCartItems = state.cartItems.filter(\n                    (item) => item.id !== action.payload.id\n                );\n\n                state.cartItems = nextCartItems;\n\n                toast.error(\"Product removed from cart\", {\n                    position: \"bottom-left\",\n                });\n            }\n\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        },\n        removeFromCart(state, action) {\n            state.cartItems.map((cartItem) => {\n                if (cartItem.id === action.payload.id) {\n                    const nextCartItems = state.cartItems.filter(\n                        (item) => item.id !== cartItem.id\n                    );\n\n                    state.cartItems = nextCartItems;\n\n                    toast.error(\"Product removed from cart\", {\n                        position: \"bottom-left\",\n                    });\n                }\n                localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n                return state;\n            });\n        },\n        getTotals(state, action) {\n            let { total, quantity } = state.cartItems.reduce(\n                (cartTotal, cartItem) => {\n                    const { price, cartQuantity } = cartItem;\n                    const itemTotal = price * cartQuantity;\n\n                    cartTotal.total += itemTotal;\n                    cartTotal.quantity += cartQuantity;\n\n                    return cartTotal;\n                },\n                {\n                    total: 0,\n                    quantity: 0,\n                }\n            );\n            total = parseFloat(total.toFixed(2));\n            state.cartTotalQuantity = quantity;\n            state.cartTotalAmount = total;\n        },\n        clearCart(state, action) {\n            state.cartItems = [];\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n            toast.error(\"Cart cleared\", { position: \"bottom-left\" });\n        },\n    },\n});\n\nexport const { addToCart, decreaseCart, removeFromCart, getTotals, clearCart } =\n    cartSlice.actions;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}