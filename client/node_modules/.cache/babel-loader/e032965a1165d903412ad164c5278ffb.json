{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst data = JSON.parse(localStorage.getItem('cart'));\nconst initialState = {\n  cartItems: data ? data : []\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, action) {\n      const product = action.payload;\n      const productInCart = state.find(item => item._id === product._id && item.title === product.title && item.description === product.description && item.price === product.price);\n\n      if (existingIndex >= 0) {\n        state.cartItems[existingIndex] = { ...state.cartItems[existingIndex],\n          cartQuantity: state.cartItems[existingIndex].cartQuantity + 1\n        };\n        toast.info(\"Increased product quantity\", {\n          position: \"bottom-left\"\n        });\n      } else {\n        let tempProductItem = { ...action.payload,\n          cartQuantity: 1\n        };\n        state.cartItems.push(tempProductItem);\n        toast.success(\"Product added to cart\", {\n          position: \"bottom-left\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    decreaseCart(state, action) {\n      const itemIndex = state.cartItems.findIndex(item => item.id === action.payload.id);\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n        toast.info(\"Decreased product quantity\", {\n          position: \"bottom-left\"\n        });\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        const nextCartItems = state.cartItems.filter(item => item.id !== action.payload.id);\n        state.cartItems = nextCartItems;\n        toast.error(\"Product removed from cart\", {\n          position: \"bottom-left\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    removeFromCart(state, action) {\n      state.cartItems.map(cartItem => {\n        if (cartItem.id === action.payload.id) {\n          const nextCartItems = state.cartItems.filter(item => item.id !== cartItem.id);\n          state.cartItems = nextCartItems;\n          toast.error(\"Product removed from cart\", {\n            position: \"bottom-left\"\n          });\n        }\n\n        localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        return state;\n      });\n    },\n\n    getTotals(state, action) {\n      let {\n        total,\n        quantity\n      } = state.cartItems.reduce((cartTotal, cartItem) => {\n        const {\n          price,\n          cartQuantity\n        } = cartItem;\n        const itemTotal = price * cartQuantity;\n        cartTotal.total += itemTotal;\n        cartTotal.quantity += cartQuantity;\n        return cartTotal;\n      }, {\n        total: 0,\n        quantity: 0\n      });\n      total = parseFloat(total.toFixed(2));\n      state.cartTotalQuantity = quantity;\n      state.cartTotalAmount = total;\n    },\n\n    clearCart(state, action) {\n      state.cartItems = [];\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n      toast.error(\"Cart cleared\", {\n        position: \"bottom-left\"\n      });\n    }\n\n  }\n});\nexport const {\n  addToCart,\n  decreaseCart,\n  removeFromCart,\n  getTotals,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/nrk/Desktop/projeler/bookStore/client/src/redux/cartSlice.js"],"names":["createSlice","toast","data","JSON","parse","localStorage","getItem","initialState","cartItems","cartSlice","name","reducers","addToCart","state","action","product","payload","productInCart","find","item","_id","title","description","price","existingIndex","cartQuantity","info","position","tempProductItem","push","success","setItem","stringify","decreaseCart","itemIndex","findIndex","id","nextCartItems","filter","error","removeFromCart","map","cartItem","getTotals","total","quantity","reduce","cartTotal","itemTotal","parseFloat","toFixed","cartTotalQuantity","cartTotalAmount","clearCart","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst data = JSON.parse(localStorage.getItem('cart'));\n\nconst initialState = {\n    cartItems: data ? data : []\n};\n\nconst cartSlice = createSlice({\n    name: \"cart\",\n    initialState,\n    reducers: {\n        addToCart(state, action) {\n            const product = action.payload\n            const productInCart = state.find(item => item._id === product._id\n                && item.title === product.title\n                && item.description === product.description\n                && item.price === product.price);\n\n            if (existingIndex >= 0) {\n                state.cartItems[existingIndex] = {\n                    ...state.cartItems[existingIndex],\n                    cartQuantity: state.cartItems[existingIndex].cartQuantity + 1,\n                };\n                toast.info(\"Increased product quantity\", {\n                    position: \"bottom-left\",\n                });\n            } else {\n                let tempProductItem = { ...action.payload, cartQuantity: 1 };\n                state.cartItems.push(tempProductItem);\n                toast.success(\"Product added to cart\", {\n                    position: \"bottom-left\",\n                });\n            }\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        },\n        decreaseCart(state, action) {\n            const itemIndex = state.cartItems.findIndex(\n                (item) => item.id === action.payload.id\n            );\n\n            if (state.cartItems[itemIndex].cartQuantity > 1) {\n                state.cartItems[itemIndex].cartQuantity -= 1;\n\n                toast.info(\"Decreased product quantity\", {\n                    position: \"bottom-left\",\n                });\n            } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n                const nextCartItems = state.cartItems.filter(\n                    (item) => item.id !== action.payload.id\n                );\n\n                state.cartItems = nextCartItems;\n\n                toast.error(\"Product removed from cart\", {\n                    position: \"bottom-left\",\n                });\n            }\n\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        },\n        removeFromCart(state, action) {\n            state.cartItems.map((cartItem) => {\n                if (cartItem.id === action.payload.id) {\n                    const nextCartItems = state.cartItems.filter(\n                        (item) => item.id !== cartItem.id\n                    );\n\n                    state.cartItems = nextCartItems;\n\n                    toast.error(\"Product removed from cart\", {\n                        position: \"bottom-left\",\n                    });\n                }\n                localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n                return state;\n            });\n        },\n        getTotals(state, action) {\n            let { total, quantity } = state.cartItems.reduce(\n                (cartTotal, cartItem) => {\n                    const { price, cartQuantity } = cartItem;\n                    const itemTotal = price * cartQuantity;\n\n                    cartTotal.total += itemTotal;\n                    cartTotal.quantity += cartQuantity;\n\n                    return cartTotal;\n                },\n                {\n                    total: 0,\n                    quantity: 0,\n                }\n            );\n            total = parseFloat(total.toFixed(2));\n            state.cartTotalQuantity = quantity;\n            state.cartTotalAmount = total;\n        },\n        clearCart(state, action) {\n            state.cartItems = [];\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n            toast.error(\"Cart cleared\", { position: \"bottom-left\" });\n        },\n    },\n});\n\nexport const { addToCart, decreaseCart, removeFromCart, getTotals, clearCart } =\n    cartSlice.actions;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}