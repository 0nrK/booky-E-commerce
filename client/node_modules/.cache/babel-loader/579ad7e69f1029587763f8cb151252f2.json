{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n11.3.  Examples\n\n   The following addresses\n\n             fe80::1234 (on the 1st link of the node)\n             ff02::5678 (on the 5th link of the node)\n             ff08::9abc (on the 10th organization of the node)\n\n   would be represented as follows:\n\n             fe80::1234%1\n             ff02::5678%5\n             ff08::9abc%10\n\n   (Here we assume a natural translation from a zone index to the\n   <zone_id> part, where the Nth zone of any scope is translated into\n   \"N\".)\n\n   If we use interface names as <zone_id>, those addresses could also be\n   represented as follows:\n\n            fe80::1234%ne0\n            ff02::5678%pvc1.3\n            ff08::9abc%interface10\n\n   where the interface \"ne0\" belongs to the 1st link, \"pvc1.3\" belongs\n   to the 5th link, and \"interface10\" belongs to the 10th organization.\n * * */\n\n\nvar IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\nvar IPv4AddressFormat = \"(\".concat(IPv4SegmentFormat, \"[.]){3}\").concat(IPv4SegmentFormat);\nvar IPv4AddressRegExp = new RegExp(\"^\".concat(IPv4AddressFormat, \"$\"));\nvar IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';\nvar IPv6AddressRegExp = new RegExp('^(' + \"(?:\".concat(IPv6SegmentFormat, \":){7}(?:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){6}(?:\").concat(IPv4AddressFormat, \"|:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){5}(?::\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,2}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){4}(?:(:\").concat(IPv6SegmentFormat, \"){0,1}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,3}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){3}(?:(:\").concat(IPv6SegmentFormat, \"){0,2}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,4}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){2}(?:(:\").concat(IPv6SegmentFormat, \"){0,3}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,5}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){1}(?:(:\").concat(IPv6SegmentFormat, \"){0,4}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,6}|:)|\") + \"(?::((?::\".concat(IPv6SegmentFormat, \"){0,5}:\").concat(IPv4AddressFormat, \"|(?::\").concat(IPv6SegmentFormat, \"){1,7}|:))\") + ')(%[0-9a-zA-Z-.:]{1,})?$');\n\nfunction isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  (0, _assertString.default)(str);\n  version = String(version);\n\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  }\n\n  if (version === '4') {\n    if (!IPv4AddressRegExp.test(str)) {\n      return false;\n    }\n\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  }\n\n  if (version === '6') {\n    return !!IPv6AddressRegExp.test(str);\n  }\n\n  return false;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"sources":["/home/nrk/Desktop/projeler/bookStore/client/node_modules/validator/lib/isIP.js"],"names":["Object","defineProperty","exports","value","default","isIP","_assertString","_interopRequireDefault","require","obj","__esModule","IPv4SegmentFormat","IPv4AddressFormat","concat","IPv4AddressRegExp","RegExp","IPv6SegmentFormat","IPv6AddressRegExp","str","version","arguments","length","undefined","String","test","parts","split","sort","a","b","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n11.3.  Examples\n\n   The following addresses\n\n             fe80::1234 (on the 1st link of the node)\n             ff02::5678 (on the 5th link of the node)\n             ff08::9abc (on the 10th organization of the node)\n\n   would be represented as follows:\n\n             fe80::1234%1\n             ff02::5678%5\n             ff08::9abc%10\n\n   (Here we assume a natural translation from a zone index to the\n   <zone_id> part, where the Nth zone of any scope is translated into\n   \"N\".)\n\n   If we use interface names as <zone_id>, those addresses could also be\n   represented as follows:\n\n            fe80::1234%ne0\n            ff02::5678%pvc1.3\n            ff08::9abc%interface10\n\n   where the interface \"ne0\" belongs to the 1st link, \"pvc1.3\" belongs\n   to the 5th link, and \"interface10\" belongs to the 10th organization.\n * * */\nvar IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\nvar IPv4AddressFormat = \"(\".concat(IPv4SegmentFormat, \"[.]){3}\").concat(IPv4SegmentFormat);\nvar IPv4AddressRegExp = new RegExp(\"^\".concat(IPv4AddressFormat, \"$\"));\nvar IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';\nvar IPv6AddressRegExp = new RegExp('^(' + \"(?:\".concat(IPv6SegmentFormat, \":){7}(?:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){6}(?:\").concat(IPv4AddressFormat, \"|:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){5}(?::\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,2}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){4}(?:(:\").concat(IPv6SegmentFormat, \"){0,1}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,3}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){3}(?:(:\").concat(IPv6SegmentFormat, \"){0,2}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,4}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){2}(?:(:\").concat(IPv6SegmentFormat, \"){0,3}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,5}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){1}(?:(:\").concat(IPv6SegmentFormat, \"){0,4}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,6}|:)|\") + \"(?::((?::\".concat(IPv6SegmentFormat, \"){0,5}:\").concat(IPv4AddressFormat, \"|(?::\").concat(IPv6SegmentFormat, \"){1,7}|:))\") + ')(%[0-9a-zA-Z-.:]{1,})?$');\n\nfunction isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  (0, _assertString.default)(str);\n  version = String(version);\n\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  }\n\n  if (version === '4') {\n    if (!IPv4AddressRegExp.test(str)) {\n      return false;\n    }\n\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  }\n\n  if (version === '6') {\n    return !!IPv6AddressRegExp.test(str);\n  }\n\n  return false;\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"]},"metadata":{},"sourceType":"script"}