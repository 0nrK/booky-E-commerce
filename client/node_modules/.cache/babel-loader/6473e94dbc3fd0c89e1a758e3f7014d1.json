{"ast":null,"code":"'use strict';\n\nvar forEach = require('foreach');\n\nvar availableTypedArrays = require('available-typed-arrays');\n\nvar callBound = require('call-bind/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\n\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\n\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\n\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\n\nif (hasToStringTag && gOPD && getPrototypeOf) {\n  forEach(typedArrays, function (typedArray) {\n    if (typeof g[typedArray] === 'function') {\n      var arr = new g[typedArray]();\n\n      if (Symbol.toStringTag in arr) {\n        var proto = getPrototypeOf(arr);\n        var descriptor = gOPD(proto, Symbol.toStringTag);\n\n        if (!descriptor) {\n          var superProto = getPrototypeOf(proto);\n          descriptor = gOPD(superProto, Symbol.toStringTag);\n        }\n\n        toStrTags[typedArray] = descriptor.get;\n      }\n    }\n  });\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n  var foundName = false;\n  forEach(toStrTags, function (getter, typedArray) {\n    if (!foundName) {\n      try {\n        var name = getter.call(value);\n\n        if (name === typedArray) {\n          foundName = name;\n        }\n      } catch (e) {}\n    }\n  });\n  return foundName;\n};\n\nvar isTypedArray = require('is-typed-array');\n\nmodule.exports = function whichTypedArray(value) {\n  if (!isTypedArray(value)) {\n    return false;\n  }\n\n  if (!hasToStringTag || !(Symbol.toStringTag in value)) {\n    return $slice($toString(value), 8, -1);\n  }\n\n  return tryTypedArrays(value);\n};","map":{"version":3,"sources":["/home/nrk/node_modules/which-typed-array/index.js"],"names":["forEach","require","availableTypedArrays","callBound","$toString","hasToStringTag","g","globalThis","global","typedArrays","$slice","toStrTags","gOPD","getPrototypeOf","Object","typedArray","arr","Symbol","toStringTag","proto","descriptor","superProto","get","tryTypedArrays","tryAllTypedArrays","value","foundName","getter","name","call","e","isTypedArray","module","exports","whichTypedArray"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIG,SAAS,GAAGD,SAAS,CAAC,2BAAD,CAAzB;;AACA,IAAIE,cAAc,GAAGJ,OAAO,CAAC,uBAAD,CAAP,EAArB;;AAEA,IAAIK,CAAC,GAAG,OAAOC,UAAP,KAAsB,WAAtB,GAAoCC,MAApC,GAA6CD,UAArD;AACA,IAAIE,WAAW,GAAGP,oBAAoB,EAAtC;AAEA,IAAIQ,MAAM,GAAGP,SAAS,CAAC,wBAAD,CAAtB;AACA,IAAIQ,SAAS,GAAG,EAAhB;;AACA,IAAIC,IAAI,GAAGX,OAAO,CAAC,8CAAD,CAAlB;;AACA,IAAIY,cAAc,GAAGC,MAAM,CAACD,cAA5B,C,CAA4C;;AAC5C,IAAIR,cAAc,IAAIO,IAAlB,IAA0BC,cAA9B,EAA8C;AAC7Cb,EAAAA,OAAO,CAACS,WAAD,EAAc,UAAUM,UAAV,EAAsB;AAC1C,QAAI,OAAOT,CAAC,CAACS,UAAD,CAAR,KAAyB,UAA7B,EAAyC;AACxC,UAAIC,GAAG,GAAG,IAAIV,CAAC,CAACS,UAAD,CAAL,EAAV;;AACA,UAAIE,MAAM,CAACC,WAAP,IAAsBF,GAA1B,EAA+B;AAC9B,YAAIG,KAAK,GAAGN,cAAc,CAACG,GAAD,CAA1B;AACA,YAAII,UAAU,GAAGR,IAAI,CAACO,KAAD,EAAQF,MAAM,CAACC,WAAf,CAArB;;AACA,YAAI,CAACE,UAAL,EAAiB;AAChB,cAAIC,UAAU,GAAGR,cAAc,CAACM,KAAD,CAA/B;AACAC,UAAAA,UAAU,GAAGR,IAAI,CAACS,UAAD,EAAaJ,MAAM,CAACC,WAApB,CAAjB;AACA;;AACDP,QAAAA,SAAS,CAACI,UAAD,CAAT,GAAwBK,UAAU,CAACE,GAAnC;AACA;AACD;AACD,GAbM,CAAP;AAcA;;AAED,IAAIC,cAAc,GAAG,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AACtD,MAAIC,SAAS,GAAG,KAAhB;AACA1B,EAAAA,OAAO,CAACW,SAAD,EAAY,UAAUgB,MAAV,EAAkBZ,UAAlB,EAA8B;AAChD,QAAI,CAACW,SAAL,EAAgB;AACf,UAAI;AACH,YAAIE,IAAI,GAAGD,MAAM,CAACE,IAAP,CAAYJ,KAAZ,CAAX;;AACA,YAAIG,IAAI,KAAKb,UAAb,EAAyB;AACxBW,UAAAA,SAAS,GAAGE,IAAZ;AACA;AACD,OALD,CAKE,OAAOE,CAAP,EAAU,CAAE;AACd;AACD,GATM,CAAP;AAUA,SAAOJ,SAAP;AACA,CAbD;;AAeA,IAAIK,YAAY,GAAG9B,OAAO,CAAC,gBAAD,CAA1B;;AAEA+B,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBT,KAAzB,EAAgC;AAChD,MAAI,CAACM,YAAY,CAACN,KAAD,CAAjB,EAA0B;AAAE,WAAO,KAAP;AAAe;;AAC3C,MAAI,CAACpB,cAAD,IAAmB,EAAEY,MAAM,CAACC,WAAP,IAAsBO,KAAxB,CAAvB,EAAuD;AAAE,WAAOf,MAAM,CAACN,SAAS,CAACqB,KAAD,CAAV,EAAmB,CAAnB,EAAsB,CAAC,CAAvB,CAAb;AAAyC;;AAClG,SAAOF,cAAc,CAACE,KAAD,CAArB;AACA,CAJD","sourcesContent":["'use strict';\n\nvar forEach = require('foreach');\nvar availableTypedArrays = require('available-typed-arrays');\nvar callBound = require('call-bind/callBound');\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasToStringTag = require('has-tostringtag/shams')();\n\nvar g = typeof globalThis === 'undefined' ? global : globalThis;\nvar typedArrays = availableTypedArrays();\n\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = require('es-abstract/helpers/getOwnPropertyDescriptor');\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tif (typeof g[typedArray] === 'function') {\n\t\t\tvar arr = new g[typedArray]();\n\t\t\tif (Symbol.toStringTag in arr) {\n\t\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\t\tif (!descriptor) {\n\t\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t\t}\n\t\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t\t}\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar foundName = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!foundName) {\n\t\t\ttry {\n\t\t\t\tvar name = getter.call(value);\n\t\t\t\tif (name === typedArray) {\n\t\t\t\t\tfoundName = name;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t});\n\treturn foundName;\n};\n\nvar isTypedArray = require('is-typed-array');\n\nmodule.exports = function whichTypedArray(value) {\n\tif (!isTypedArray(value)) { return false; }\n\tif (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }\n\treturn tryTypedArrays(value);\n};\n"]},"metadata":{},"sourceType":"script"}