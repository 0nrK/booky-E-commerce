{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { v4 as uuid } from \"uuid\";\nconst data = typeof window !== \"undefined\" && localStorage.getItem(\"cart\") ? JSON.parse(localStorage.getItem(\"cart\")) : [];\nconst initialState = {\n  cartItems: []\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, action) {}\n    /*             localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n     */\n    ,\n\n    decreaseCart(state, action) {\n      const itemIndex = state.cartItems.findIndex(item => item.id === action.payload.id);\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n        toast.info(\"Decreased product quantity\", {\n          position: \"bottom-left\"\n        });\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        const nextCartItems = state.cartItems.filter(item => item.id !== action.payload.id);\n        state.cartItems = nextCartItems;\n        toast.error(\"Product removed from cart\", {\n          position: \"bottom-left\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    removeFromCart(state, action) {\n      state.cartItems.map(cartItem => {\n        if (cartItem.id === action.payload.id) {\n          const nextCartItems = state.cartItems.filter(item => item.id !== cartItem.id);\n          state.cartItems = nextCartItems;\n          toast.error(\"Product removed from cart\", {\n            position: \"bottom-left\"\n          });\n        }\n\n        localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        return state;\n      });\n    },\n\n    getTotals(state, action) {\n      let {\n        total,\n        quantity\n      } = state.cartItems.reduce((cartTotal, cartItem) => {\n        const {\n          price,\n          cartQuantity\n        } = cartItem;\n        const itemTotal = price * cartQuantity;\n        cartTotal.total += itemTotal;\n        cartTotal.quantity += cartQuantity;\n        return cartTotal;\n      }, {\n        total: 0,\n        quantity: 0\n      });\n      total = parseFloat(total.toFixed(2));\n      state.cartTotalQuantity = quantity;\n      state.cartTotalAmount = total;\n    },\n\n    clearCart(state, action) {\n      state.cartItems = [];\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n      toast.error(\"Cart cleared\", {\n        position: \"bottom-left\"\n      });\n    }\n\n  }\n});\nexport const {\n  addToCart,\n  decreaseCart,\n  removeFromCart,\n  getTotals,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/nrk/Desktop/projeler/bookStore/client/src/redux/cartSlice.js"],"names":["createSlice","toast","v4","uuid","data","window","localStorage","getItem","JSON","parse","initialState","cartItems","cartSlice","name","reducers","addToCart","state","action","decreaseCart","itemIndex","findIndex","item","id","payload","cartQuantity","info","position","nextCartItems","filter","error","setItem","stringify","removeFromCart","map","cartItem","getTotals","total","quantity","reduce","cartTotal","price","itemTotal","parseFloat","toFixed","cartTotalQuantity","cartTotalAmount","clearCart","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,MAAMC,IAAI,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiCC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAjC,GACTC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CADS,GACkC,EAD/C;AAGA,MAAMG,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE;AADM,CAArB;AAIA,MAAMC,SAAS,GAAGZ,WAAW,CAAC;AAC1Ba,EAAAA,IAAI,EAAE,MADoB;AAE1BH,EAAAA,YAF0B;AAG1BI,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB,CAExB;AAET;AACA;AANc;;AAONC,IAAAA,YAAY,CAACF,KAAD,EAAQC,MAAR,EAAgB;AACxB,YAAME,SAAS,GAAGH,KAAK,CAACL,SAAN,CAAgBS,SAAhB,CACbC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACM,OAAP,CAAeD,EADvB,CAAlB;;AAIA,UAAIN,KAAK,CAACL,SAAN,CAAgBQ,SAAhB,EAA2BK,YAA3B,GAA0C,CAA9C,EAAiD;AAC7CR,QAAAA,KAAK,CAACL,SAAN,CAAgBQ,SAAhB,EAA2BK,YAA3B,IAA2C,CAA3C;AAEAvB,QAAAA,KAAK,CAACwB,IAAN,CAAW,4BAAX,EAAyC;AACrCC,UAAAA,QAAQ,EAAE;AAD2B,SAAzC;AAGH,OAND,MAMO,IAAIV,KAAK,CAACL,SAAN,CAAgBQ,SAAhB,EAA2BK,YAA3B,KAA4C,CAAhD,EAAmD;AACtD,cAAMG,aAAa,GAAGX,KAAK,CAACL,SAAN,CAAgBiB,MAAhB,CACjBP,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACM,OAAP,CAAeD,EADnB,CAAtB;AAIAN,QAAAA,KAAK,CAACL,SAAN,GAAkBgB,aAAlB;AAEA1B,QAAAA,KAAK,CAAC4B,KAAN,CAAY,2BAAZ,EAAyC;AACrCH,UAAAA,QAAQ,EAAE;AAD2B,SAAzC;AAGH;;AAEDpB,MAAAA,YAAY,CAACwB,OAAb,CAAqB,WAArB,EAAkCtB,IAAI,CAACuB,SAAL,CAAef,KAAK,CAACL,SAArB,CAAlC;AACH,KA/BK;;AAgCNqB,IAAAA,cAAc,CAAChB,KAAD,EAAQC,MAAR,EAAgB;AAC1BD,MAAAA,KAAK,CAACL,SAAN,CAAgBsB,GAAhB,CAAqBC,QAAD,IAAc;AAC9B,YAAIA,QAAQ,CAACZ,EAAT,KAAgBL,MAAM,CAACM,OAAP,CAAeD,EAAnC,EAAuC;AACnC,gBAAMK,aAAa,GAAGX,KAAK,CAACL,SAAN,CAAgBiB,MAAhB,CACjBP,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYY,QAAQ,CAACZ,EADb,CAAtB;AAIAN,UAAAA,KAAK,CAACL,SAAN,GAAkBgB,aAAlB;AAEA1B,UAAAA,KAAK,CAAC4B,KAAN,CAAY,2BAAZ,EAAyC;AACrCH,YAAAA,QAAQ,EAAE;AAD2B,WAAzC;AAGH;;AACDpB,QAAAA,YAAY,CAACwB,OAAb,CAAqB,WAArB,EAAkCtB,IAAI,CAACuB,SAAL,CAAef,KAAK,CAACL,SAArB,CAAlC;AACA,eAAOK,KAAP;AACH,OAdD;AAeH,KAhDK;;AAiDNmB,IAAAA,SAAS,CAACnB,KAAD,EAAQC,MAAR,EAAgB;AACrB,UAAI;AAAEmB,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAsBrB,KAAK,CAACL,SAAN,CAAgB2B,MAAhB,CACtB,CAACC,SAAD,EAAYL,QAAZ,KAAyB;AACrB,cAAM;AAAEM,UAAAA,KAAF;AAAShB,UAAAA;AAAT,YAA0BU,QAAhC;AACA,cAAMO,SAAS,GAAGD,KAAK,GAAGhB,YAA1B;AAEAe,QAAAA,SAAS,CAACH,KAAV,IAAmBK,SAAnB;AACAF,QAAAA,SAAS,CAACF,QAAV,IAAsBb,YAAtB;AAEA,eAAOe,SAAP;AACH,OATqB,EAUtB;AACIH,QAAAA,KAAK,EAAE,CADX;AAEIC,QAAAA,QAAQ,EAAE;AAFd,OAVsB,CAA1B;AAeAD,MAAAA,KAAK,GAAGM,UAAU,CAACN,KAAK,CAACO,OAAN,CAAc,CAAd,CAAD,CAAlB;AACA3B,MAAAA,KAAK,CAAC4B,iBAAN,GAA0BP,QAA1B;AACArB,MAAAA,KAAK,CAAC6B,eAAN,GAAwBT,KAAxB;AACH,KApEK;;AAqENU,IAAAA,SAAS,CAAC9B,KAAD,EAAQC,MAAR,EAAgB;AACrBD,MAAAA,KAAK,CAACL,SAAN,GAAkB,EAAlB;AACAL,MAAAA,YAAY,CAACwB,OAAb,CAAqB,WAArB,EAAkCtB,IAAI,CAACuB,SAAL,CAAef,KAAK,CAACL,SAArB,CAAlC;AACAV,MAAAA,KAAK,CAAC4B,KAAN,CAAY,cAAZ,EAA4B;AAAEH,QAAAA,QAAQ,EAAE;AAAZ,OAA5B;AACH;;AAzEK;AAHgB,CAAD,CAA7B;AAgFA,OAAO,MAAM;AAAEX,EAAAA,SAAF;AAAaG,EAAAA,YAAb;AAA2Bc,EAAAA,cAA3B;AAA2CG,EAAAA,SAA3C;AAAsDW,EAAAA;AAAtD,IACTlC,SAAS,CAACmC,OADP;AAGP,eAAenC,SAAS,CAACoC,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nimport { v4 as uuid } from \"uuid\";\n\nconst data = typeof window !== \"undefined\" && localStorage.getItem(\"cart\") ?\n    JSON.parse(localStorage.getItem(\"cart\")) : []\n\nconst initialState = {\n    cartItems: []\n};\n\nconst cartSlice = createSlice({\n    name: \"cart\",\n    initialState,\n    reducers: {\n        addToCart(state, action) {\n\n        }\n\n/*             localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n */        ,\n        decreaseCart(state, action) {\n            const itemIndex = state.cartItems.findIndex(\n                (item) => item.id === action.payload.id\n            );\n\n            if (state.cartItems[itemIndex].cartQuantity > 1) {\n                state.cartItems[itemIndex].cartQuantity -= 1;\n\n                toast.info(\"Decreased product quantity\", {\n                    position: \"bottom-left\",\n                });\n            } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n                const nextCartItems = state.cartItems.filter(\n                    (item) => item.id !== action.payload.id\n                );\n\n                state.cartItems = nextCartItems;\n\n                toast.error(\"Product removed from cart\", {\n                    position: \"bottom-left\",\n                });\n            }\n\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        },\n        removeFromCart(state, action) {\n            state.cartItems.map((cartItem) => {\n                if (cartItem.id === action.payload.id) {\n                    const nextCartItems = state.cartItems.filter(\n                        (item) => item.id !== cartItem.id\n                    );\n\n                    state.cartItems = nextCartItems;\n\n                    toast.error(\"Product removed from cart\", {\n                        position: \"bottom-left\",\n                    });\n                }\n                localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n                return state;\n            });\n        },\n        getTotals(state, action) {\n            let { total, quantity } = state.cartItems.reduce(\n                (cartTotal, cartItem) => {\n                    const { price, cartQuantity } = cartItem;\n                    const itemTotal = price * cartQuantity;\n\n                    cartTotal.total += itemTotal;\n                    cartTotal.quantity += cartQuantity;\n\n                    return cartTotal;\n                },\n                {\n                    total: 0,\n                    quantity: 0,\n                }\n            );\n            total = parseFloat(total.toFixed(2));\n            state.cartTotalQuantity = quantity;\n            state.cartTotalAmount = total;\n        },\n        clearCart(state, action) {\n            state.cartItems = [];\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n            toast.error(\"Cart cleared\", { position: \"bottom-left\" });\n        },\n    },\n});\n\nexport const { addToCart, decreaseCart, removeFromCart, getTotals, clearCart } =\n    cartSlice.actions;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}