{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst initialState = {\n  items: []\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, action) {\n      const newItem = action.payload;\n      state.items.push(newItem);\n      toast.success(\"Book added to cart\", {\n        position: \"bottom-left\"\n      });\n      /* if (localStorage.getItem(\"count\")) {\n          localStorage[\"items\"] = JSON.stringify(newItems);\n          localStorage[\"count\"] = count;\n          localStorage[\"total\"] = total;\n      } else {\n          localStorage.setItem(\"items\", JSON.stringify(newItems));\n          localStorage.setItem(\"total\", total);\n          localStorage.setItem(\"count\", count);\n      } */\n    },\n\n    removeFromCart(state, action) {\n      state.cartItems.map(cartItem => {\n        if (cartItem._id === action.payload._id) {\n          const filteredItems = state.cartItems.filter(item => item._id !== cartItem._id);\n          console.log(filteredItems);\n          state.cartItems = filteredItems;\n          toast.error(\"Product removed from cart\", {\n            position: \"bottom-left\"\n          });\n        }\n\n        localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        return state;\n      });\n    },\n\n    clearCart(state, action) {\n      state.cartItems = [];\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n      toast.error(\"Cart cleared\", {\n        position: \"bottom-left\"\n      });\n    }\n\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  getTotals,\n  clearCart\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/home/nrk/Desktop/projeler/bookStore/client/src/redux/cartSlice.js"],"names":["createSlice","toast","initialState","items","cartSlice","name","reducers","addToCart","state","action","newItem","payload","push","success","position","removeFromCart","cartItems","map","cartItem","_id","filteredItems","filter","item","console","log","error","localStorage","setItem","JSON","stringify","clearCart","getTotals","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAGA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE;AADU,CAArB;AAIA,MAAMC,SAAS,GAAGJ,WAAW,CAAC;AAC1BK,EAAAA,IAAI,EAAE,MADoB;AAE1BH,EAAAA,YAF0B;AAG1BI,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAErB,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACAH,MAAAA,KAAK,CAACL,KAAN,CAAYS,IAAZ,CAAiBF,OAAjB;AAEAT,MAAAA,KAAK,CAACY,OAAN,CAAc,oBAAd,EAAoC;AAChCC,QAAAA,QAAQ,EAAE;AADsB,OAApC;AAIA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGS,KArBK;;AAsBNC,IAAAA,cAAc,CAACP,KAAD,EAAQC,MAAR,EAAgB;AAC1BD,MAAAA,KAAK,CAACQ,SAAN,CAAgBC,GAAhB,CAAqBC,QAAD,IAAc;AAC9B,YAAIA,QAAQ,CAACC,GAAT,KAAiBV,MAAM,CAACE,OAAP,CAAeQ,GAApC,EAAyC;AACrC,gBAAMC,aAAa,GAAGZ,KAAK,CAACQ,SAAN,CAAgBK,MAAhB,CACjBC,IAAD,IAAUA,IAAI,CAACH,GAAL,KAAaD,QAAQ,CAACC,GADd,CAAtB;AAGAI,UAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAZ;AAEAZ,UAAAA,KAAK,CAACQ,SAAN,GAAkBI,aAAlB;AAEAnB,UAAAA,KAAK,CAACwB,KAAN,CAAY,2BAAZ,EAAyC;AACrCX,YAAAA,QAAQ,EAAE;AAD2B,WAAzC;AAGH;;AACDY,QAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAerB,KAAK,CAACQ,SAArB,CAAlC;AACA,eAAOR,KAAP;AACH,OAfD;AAgBH,KAvCK;;AAwCNsB,IAAAA,SAAS,CAACtB,KAAD,EAAQC,MAAR,EAAgB;AACrBD,MAAAA,KAAK,CAACQ,SAAN,GAAkB,EAAlB;AACAU,MAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAerB,KAAK,CAACQ,SAArB,CAAlC;AACAf,MAAAA,KAAK,CAACwB,KAAN,CAAY,cAAZ,EAA4B;AAAEX,QAAAA,QAAQ,EAAE;AAAZ,OAA5B;AACH;;AA5CK;AAHgB,CAAD,CAA7B;AAmDA,OAAO,MAAM;AAAEP,EAAAA,SAAF;AAAaQ,EAAAA,cAAb;AAA6BgB,EAAAA,SAA7B;AAAwCD,EAAAA;AAAxC,IACT1B,SAAS,CAAC4B,OADP;AAGP,eAAe5B,SAAS,CAAC6B,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\n\n\nconst initialState = {\n    items: []\n};\n\nconst cartSlice = createSlice({\n    name: \"cart\",\n    initialState,\n    reducers: {\n        addToCart(state, action) {\n\n            const newItem = action.payload\n            state.items.push(newItem)\n\n            toast.success(\"Book added to cart\", {\n                position: \"bottom-left\",\n            });\n\n            /* if (localStorage.getItem(\"count\")) {\n                localStorage[\"items\"] = JSON.stringify(newItems);\n                localStorage[\"count\"] = count;\n                localStorage[\"total\"] = total;\n            } else {\n                localStorage.setItem(\"items\", JSON.stringify(newItems));\n                localStorage.setItem(\"total\", total);\n                localStorage.setItem(\"count\", count);\n            } */\n\n\n        },\n        removeFromCart(state, action) {\n            state.cartItems.map((cartItem) => {\n                if (cartItem._id === action.payload._id) {\n                    const filteredItems = state.cartItems.filter(\n                        (item) => item._id !== cartItem._id\n                    );\n                    console.log(filteredItems);\n\n                    state.cartItems = filteredItems;\n\n                    toast.error(\"Product removed from cart\", {\n                        position: \"bottom-left\",\n                    });\n                }\n                localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n                return state;\n            });\n        },\n        clearCart(state, action) {\n            state.cartItems = [];\n            localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n            toast.error(\"Cart cleared\", { position: \"bottom-left\" });\n        },\n    },\n});\n\nexport const { addToCart, removeFromCart, getTotals, clearCart } =\n    cartSlice.actions;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}